# +-----------------------------------
# | 
# | oneAPI ASP Editor v1.0
# |
# +----------------------------------- 

# 
# request TCL package from ACDS 24.1
# 
package require -exact qsys 24.1

########################
# Helper Procedures
########################

# Procedure sets module properties, call with initialized array 
proc init_module { prop_list val_list } {
  foreach prop $prop_list val $val_list {
    if { [string equal $prop "DOC_LINK"] } {
      add_documentation_link "[lindex $val_list [ lsearch -exact $prop_list "DISPLAY_NAME" ] ] User Guide" $val
    } elseif { [string equal $val ""] || [string equal $val " "] } {
      continue
    } else {
      set_module_property $prop $val 
    }
  }
  return        
}

# Procedure adds parameters & sets properties, call with initialized array 
proc add_param { prop_list val_list } {
  foreach val $val_list {
    foreach prop $prop_list i $val {
      if { [string equal $prop "NAME"] } {
        # Get index for TYPE and read value from list of values at this index
        add_parameter $i [lindex $val [lsearch -exact $prop_list "TYPE"]]
        lappend ::all_params $i
      } elseif { [string equal $prop "TYPE"] || [string equal $i ""] || [string equal $i " "] || [string equal $prop "IP_HEADER"] } { # skip empty properties & TYPE as TYPE must be specified while adding parameter & cannot be modified after
        continue
      } else {
        set_parameter_property [lindex $val [lsearch -exact $prop_list "NAME"]] $prop "$i"
      }
    }
  }
  return
}

# Procedure builds the static GUI display without parameters
proc static_display { prop_list val_list } {
  foreach val $val_list {
    # Though prop_list is not required, this is done to keep it easy to upgrade in future, if properties change/get added
    add_display_item [lindex $val [lsearch -exact $prop_list "GROUP"]] [lindex $val [lsearch -exact $prop_list "ID"]] [lindex $val [lsearch -exact $prop_list "TYPE"]] [lindex $val [lsearch -exact $prop_list "ADD_ARGS"]]
    foreach prop $prop_list i $val {
      if { [string equal $prop "GROUP"] || [string equal $prop "ID"]  || [string equal $prop "TYPE"] || [string equal $prop "ADD_ARGS"] || \
           [string equal $i ""] || [string equal $i " "] } {
        continue
      } else {
        set_display_item_property [lindex $val [lsearch -exact $prop_list "ID"]] $prop [lindex $val [lsearch -exact $prop_list $prop]]
      }
    }
  }
  return
}

# Procedure to generate Verilog Header file (ofs_asp.vh)
proc generate_vh {} {
  set platform_name                 [get_parameter_value PLATFORM_NAME]
  set board_variant_name            [get_parameter_value BOARD_VARIANT_NAME]
  set num_dma_channels              [get_parameter_value NUM_DMA_CHANNELS]
  set num_global_mem_systems        [get_parameter_value NUM_GLOBAL_MEM_SYSTEMS]
  set enable_usm                    [get_parameter_value ENABLE_USM]
  set global_mem_bsp_avmm_write_ack [get_parameter_value MEM_0_BSP_AVMM_WRITE_ACK]
  set num_io_channels               [get_parameter_value NUM_IO_CHANNELS]

  set fp [ open "$platform_name/hardware/$board_variant_name/build/rtl/ofs_asp.vh" w ]

  # write header
  puts $fp "// THIS FILE IS AUTO-GENERATED BY THE PLATFORM DESIGNER ONEAPI KERNEL WRAPPER IP"
  puts $fp "// PLEASE DO NOT MODIFY THIS FILE"
  puts $fp "// INSTEAD MAKE CHANGES IN YOUR PLATFORM DESIGNER PARAMETERIZATION OF THIS IP"
  puts $fp "// AND RE-GENERATE\n"

  # write include files
  puts $fp "//This is the database of header files included in the FIM-build."
  puts $fp "`include \"ofs_ip_cfg_db.vh\""

  # write header lines
  puts $fp "`ifndef ofs_asp_vh\n"
  puts $fp "  `define ofs_asp_vh\n"

  puts $fp "  //print some package/parameter information to the screen during synthesis"
  puts $fp "  `define PRINT_OFS_ASP_PKG_PARAMETERS_DURING_SYNTHESIS 1\n"
    
  puts $fp "  //host-memory/PCIe channels"
  for {set i 0} {$i < $num_dma_channels} {incr i 1} {
    puts $fp "  `define ASP_ENABLE_HOSTMEM_CH_$i 1"
  }

  # write out enabled memory banks
  puts $fp "  //the FIM changed the 'mem_ss' define name to"
  puts $fp "  // 'local_mem'; make it backward compatible (at" 
  puts $fp "  // the expense of being verbose and ugly)"
  for {set i 0} {$i < $num_global_mem_systems} {incr i 1} {
    puts $fp "  `define ASP_ENABLE_GLOBAL_MEM_$i"
    set global_mem_num_mem_banks [get_parameter_value MEM_${i}_NUM_BANKS]
    for {set j 0} {$j < $global_mem_num_mem_banks} {incr j 1} {
      puts $fp "  `define ASP_ENABLE_GLOBAL_MEM_${i}_BANK_$j 1"
    }
  }

  # write out DMA parameters
  puts $fp "  //DMA-support"
  puts $fp "  `define INCLUDE_ASP_DMA 1"
  for {set i 0} {$i < $num_dma_channels} {incr i 1} {
    puts $fp "  `define ASP_ENABLE_DMA_CH_$i 1"
  }

  # write out USM parameters
  if {$enable_usm == true} { 
    puts $fp "  //USM-support"
    puts $fp "  `define INCLUDE_USM_SUPPORT 1"
    puts $fp "  `define USM_DO_SINGLE_BURST_PARTIAL_WRITES 1\n"
  }
  for {set i 0} {$i < $num_dma_channels} {incr i 1} {
    puts $fp "  `define ASP_ENABLE_USM_CH_$i 1"
  }

  # write out IRQ parameters
  puts $fp "  // enable kernel interrupts"
  puts $fp "  // `define USE_KERNEL_IRQ 1\n"
  puts $fp "  // enable FPGA-to-Host DMA completion IRQ"
  puts $fp "  // `define USE_F2H_IRQ 1\n"
  puts $fp "  // enable Host-to-FPGA DMA completion IRQ"
  puts $fp "  `define USE_H2F_IRQ 1\n"
  puts $fp "  // enable FPGA-to-Host DMA write fence"
  puts $fp "  // `define USE_WR_FENCE_FLAG 1\n"

  # PIM clock crosser usage
  puts $fp "  // enable the PIM's CDC for host-channel AND local memory interfaces"
  puts $fp "  // `define USE_KERNEL_CLK_EVERYWHERE_IN_PR_REGION 1"
  puts $fp "  // enable the PIM's CDC for host-channel"
  puts $fp "  // `define USE_PIM_CDC_FOR_HOSTCHAN 1"
  puts $fp "  // enable the PIM's CDC for local-memory interfaces"
  puts $fp "  // `define USE_PIM_CDC_FOR_LOCALMEM 1\n"

  # write acknowledge for kernel system
  if {$global_mem_bsp_avmm_write_ack == true} {
    puts $fp "  // enable write-acks for kernel-system writes to local memory"
    puts $fp "  // if this is disabled, you also need to remove the" 
    puts $fp "  // bsp_avmm_write_ack=\"1\" setting(s) board_spec.xml."
    puts $fp "  `define USE_WRITEACKS_FOR_KERNELSYSTEM_LOCALMEMORY_ACCESSES 1\n"
  }

  # IO channels
  if { $num_io_channels == "0"} {
    set iopipe_support false
  } else {
    set iopipe_support true
  }
  if {$iopipe_support == true} {
    puts $fp "  // enable UDP offload engine and I/O channels"
    puts $fp "  `define INCLUDE_IO_PIPES 1"
    for {set i 0} {$i < $num_io_channels} {incr i 1} {
      puts $fp "  `ifdef INCLUDE_HSSI_PORT_$i"
      puts $fp "    `define ASP_ENABLE_IOPIPE_$i 1"
      puts $fp "  `endif"
    }
  }

  puts $fp "`endif"
  close $fp
  return
}

# Procedure to generate OFS ASP package file (ofs_asp_pkg.sv) 
proc generate_package {} {
  set platform_name                 [get_parameter_value PLATFORM_NAME]
  set board_variant_name            [get_parameter_value BOARD_VARIANT_NAME]

  set num_global_mem_systems        [get_parameter_value NUM_GLOBAL_MEM_SYSTEMS]
  set kernel_to_ccb_pipeline_stages [get_parameter_value MEM_0_KERNEL_TO_CCB_PIPELINE_STAGES]

  set kernel_cra_pipeline_stages    [get_parameter_value KERNEL_CRA_PIPELINE_STAGES]
  set num_io_channels               [get_parameter_value NUM_IO_CHANNELS]

  set host_mem_data_width           [get_parameter_value HOST_MEM_DATA_WIDTH]
  set host_mem_address_width        [get_parameter_value HOST_MEM_ADDRESS_WIDTH]
  set host_mem_max_burst            [get_parameter_value HOST_MEM_MAX_BURST] 
  set log2_host_mem_max_burst       [expr int((log($host_mem_max_burst) / log(2)) + 1)]
  set host_mem_pipeline_stages      [get_parameter_value HOST_MEM_PIPELINE_STAGES]

  set fp [ open "$platform_name/hardware/$board_variant_name/build/rtl/ofs_asp_pkg.sv" w ]

  # write out header
  puts $fp "// THIS FILE IS AUTO-GENERATED BY THE PLATFORM DESIGNER ONEAPI KERNEL WRAPPER IP"
  puts $fp "// PLEASE DO NOT MODIFY THIS FILE"
  puts $fp "// INSTEAD MAKE CHANGES IN YOUR PLATFORM DESIGNER PARAMETERIZATION OF THIS IP"
  puts $fp "// AND RE-GENERATE\n"

  # write include files
  puts $fp "`include \"ofs_asp.vh\""
  puts $fp "package ofs_asp_pkg;\n"

  puts $fp "  parameter BITS_PER_BYTE = 8;\n"

  puts $fp "  parameter HOSTMEM_DATA_WIDTH = ofs_plat_host_chan_pkg::DATA_WIDTH;\n"
    
  puts $fp "  parameter ASP_MMIO_DATA_WIDTH = ofs_plat_host_chan_pkg::MMIO_DATA_WIDTH;"
  puts $fp "  parameter ASP_MMIO_ADDR_WIDTH = ofs_plat_host_chan_pkg::MMIO_ADDR_WIDTH_BYTES;"
  puts $fp "  parameter ASP_MMIO_QSYS_ADDR_WIDTH = 18;\n"
   
  for {set i 0} {$i < $num_global_mem_systems} {incr i 1} {
    set global_mem_num_mem_banks [get_parameter_value MEM_${i}_NUM_BANKS]
    puts $fp "  parameter ASP_GLOBAL_MEM_${i}_NUM_CHANNELS = $global_mem_num_mem_banks;"

    set global_mem_data_width [get_parameter_value MEM_${i}_DATA_WIDTH] 
    puts $fp "  parameter ASP_GLOBAL_MEM_${i}_AVMM_DATA_WIDTH = $global_mem_data_width;"

    set global_mem_bank_addr_width [get_parameter_value MEM_${i}_BANK_ADDR_WIDTH]
    puts $fp "  parameter ASP_GLOBAL_MEM_${i}_AVMM_ADDR_WIDTH = $global_mem_bank_addr_width;"

    set global_mem_max_burst      [get_parameter_value MEM_${i}_MAX_BURST]
    set log2_global_mem_max_burst [expr int((log($global_mem_max_burst) / log(2)) + 1)] 
    puts $fp "  parameter ASP_GLOBAL_MEM_${i}_AVMM_BURSTCNT_WIDTH = $log2_global_mem_max_burst;"
  }
 
  puts $fp "  parameter ASP_LOCALMEM_NUM_CHANNELS = local_mem_cfg_pkg::LOCAL_MEM_NUM_BANKS;"
  puts $fp "  parameter ASP_LOCALMEM_AVMM_DATA_WIDTH  = local_mem_cfg_pkg::LOCAL_MEM_DATA_WIDTH;"
  puts $fp "  parameter ASP_LOCALMEM_AVMM_ADDR_WIDTH  = local_mem_cfg_pkg::LOCAL_MEM_BYTE_ADDR_WIDTH;"
  puts $fp "  parameter ASP_LOCALMEM_AVMM_BURSTCNT_WIDTH = local_mem_cfg_pkg::LOCAL_MEM_BURST_CNT_WIDTH;"
  puts $fp "  parameter ASP_LOCALMEM_AVMM_BYTEENABLE_WIDTH = ASP_LOCALMEM_AVMM_DATA_WIDTH/8;\n"
   
  set global_mem_max_burst      [get_parameter_value MEM_0_MAX_BURST]
  set log2_global_mem_max_burst [expr int((log($global_mem_max_burst) / log(2)) + 1)] 
  puts $fp "  // some parameters for QSYS/kernel-system"
  puts $fp "  parameter ASP_LOCALMEM_QSYS_BURSTCNT_WIDTH = $log2_global_mem_max_burst; //burstcount limit of $global_mem_max_burst\n"

  puts $fp "  // The kernel-system can only access on a per-word basis. The data bus"
  puts $fp "  // to the EMIF is ASP_LOCALMEM_AVMM_DATA_WIDTH bits. Use clog2() to figure out"
  puts $fp "  // how many lsbs to zero-out or shift."
  puts $fp "  parameter KERNELSYSTEM_MEMORY_WORD_BYTE_OFFSET = \$clog2(HOSTMEM_DATA_WIDTH/BITS_PER_BYTE);\n"
    
  puts $fp "  parameter KERNELSYSTEM_LOCALMEM_ADDR_WIDTH = ASP_LOCALMEM_AVMM_ADDR_WIDTH-KERNELSYSTEM_MEMORY_WORD_BYTE_OFFSET;\n"
    
  puts $fp "  // Host Memory"
  puts $fp "  parameter HOSTMEM_WORD_ADDR_WIDTH = ofs_plat_host_chan_pkg::ADDR_WIDTH_LINES;"
  puts $fp "  parameter HOSTMEM_BYTE_ADDR_WIDTH = ofs_plat_host_chan_pkg::ADDR_WIDTH_BYTES;\n"

  puts $fp "  // Parameters for USM"
  puts $fp "  parameter USM_AVMM_ADDR_WIDTH = $host_mem_address_width + KERNELSYSTEM_MEMORY_WORD_BYTE_OFFSET;"
  puts $fp "  parameter USM_AVMM_DATA_WIDTH = $host_mem_data_width;"
  puts $fp "  parameter USM_AVMM_BURSTCOUNT_WIDTH = $log2_host_mem_max_burst;"
  puts $fp "  parameter USM_BURSTCOUNT_MAX = $host_mem_max_burst;\n"

  puts $fp "  parameter KERNEL_CRA_DATA_WIDTH = ASP_MMIO_DATA_WIDTH;"
  puts $fp "  parameter KERNEL_CRA_ADDR_WIDTH = 30;"
  puts $fp "  parameter KERNEL_CRA_BYTEENABLE_WIDTH = KERNEL_CRA_DATA_WIDTH/8;\n"

  puts $fp "  // Some parameters for the kernel-wrapper's AVMM pipeline bridges"
  puts $fp "  // memory pipelines"
  puts $fp "  parameter KERNELWRAPPER_MEM_PIPELINE_STAGES_RDDATA = $kernel_to_ccb_pipeline_stages;"
  puts $fp "  parameter KERNELWRAPPER_MEM_PIPELINE_STAGES_CMD    = 1;"
  puts $fp "  // this wait-req needs to be reflected in both the board_spc.xml and ccb (cross-to-kernel) settings"
  puts $fp "  parameter KERNELWRAPPER_MEM_PIPELINE_DISABLEWAITREQBUFFERING = 1;"
  puts $fp "  // CRA pipelines"
  puts $fp "  parameter KERNELWRAPPER_CRA_PIPELINE_STAGES_RDDATA = $kernel_cra_pipeline_stages;"
  puts $fp "  parameter KERNELWRAPPER_CRA_PIPELINE_STAGES_CMD    = 1;"
  puts $fp "  // this wait-req needs to be reflected in both the board_spc.xml and ccb settings"
  puts $fp "  parameter KERNELWRAPPER_CRA_PIPELINE_DISABLEWAITREQBUFFERING = 1;"
  puts $fp "  // USM memory pipelines"
  puts $fp "  parameter KERNELWRAPPER_SVM_PIPELINE_STAGES_RDDATA = $host_mem_pipeline_stages;"
  puts $fp "  parameter KERNELWRAPPER_SVM_PIPELINE_STAGES_CMD    = 1;"
  puts $fp "  // this wait-req needs to be reflected in both the board_spc.xml and ccb (cross-to-kernel) settings"
  puts $fp "  parameter KERNELWRAPPER_SVM_PIPELINE_DISABLEWAITREQBUFFERING = 1;\n"
    
  puts $fp "  // Interrupt parameters"
  puts $fp "  parameter ASP_NUM_INTERRUPT_LINES = 4;"
  puts $fp "  parameter ASP_NUM_IRQ_USED     = 3; //DMA_0, kernel, DMA_1"
  puts $fp "  parameter ASP_DMA_0_IRQ_BIT    = 0;"
  puts $fp "  parameter ASP_KERNEL_IRQ_BIT   = 1;"
  puts $fp "  parameter ASP_DMA_1_IRQ_BIT    = 2;\n"
    
  puts $fp "  `ifdef USE_KERNEL_CLK_EVERYWHERE_IN_PR_REGION"
  puts $fp "    parameter USE_PIM_CDC_HOSTCHAN = 1;"
  puts $fp "    `define USE_PIM_CDC_FOR_HOSTCHAN 1"
  puts $fp "    parameter USE_PIM_CDC_LOCALMEM = 1;"
  puts $fp "    `define USE_PIM_CDC_FOR_LOCALMEM 1"
  puts $fp "  `else"
  puts $fp "    `ifdef USE_PIM_CDC_FOR_HOSTCHAN"
  puts $fp "      parameter USE_PIM_CDC_HOSTCHAN = 1;"
  puts $fp "    `else"
  puts $fp "      parameter USE_PIM_CDC_HOSTCHAN = 0;"
  puts $fp "    `endif"
  puts $fp "    `ifdef USE_PIM_CDC_FOR_LOCALMEM"
  puts $fp "      parameter USE_PIM_CDC_LOCALMEM = 1;"
  puts $fp "    `else"
  puts $fp "      parameter USE_PIM_CDC_LOCALMEM = 0;"
  puts $fp "    `endif"
  puts $fp "  `endif"

  puts $fp "  //number of IO Channels/Pipes enabled in the ASP."
  puts $fp "  `ifdef INCLUDE_IO_PIPES"
  puts $fp "    parameter IO_PIPES_NUM_CHAN = `OFS_FIM_IP_CFG_HSSI_SS_NUM_ETH_PORTS;"
  puts $fp "  `else"
  puts $fp "    parameter IO_PIPES_NUM_CHAN = 0;"
  puts $fp "  `endif"
  puts $fp "  //Avalon Streaming data width - I/O Pipe connection to kernel-system"
  puts $fp "  parameter ASP_ETH_PKT_DATA_WIDTH = ofs_fim_eth_if_pkg::ETH_PACKET_WIDTH;"
  puts $fp ""
  puts $fp "  //make these equal for now; maybe in the future this can be unbalanced but it"
  puts $fp "  // could add a lot of complexity (tying-off the unused channels, for example)"
  puts $fp "  parameter NUM_HOSTMEM_CHAN = 1;"
  puts $fp "  //which hostmem-channel (ofs_plat_avalon_mem_rdwr_if at ofs_plat_afu)"
  puts $fp "  //is the default for VTP and MMIO?"
  puts $fp "  parameter HOSTMEM_CHAN_DEFAULT_WITH_MMIO = 0;"
  puts $fp "  //which hostmem-channel is used for the VTP-SVC connection?"
  puts $fp "  parameter HOSTMEM_CHAN_VTP_SVC = HOSTMEM_CHAN_DEFAULT_WITH_MMIO;"
  puts $fp "  `ifdef INCLUDE_ASP_DMA"
  puts $fp "    parameter NUM_DMA_CHAN = NUM_HOSTMEM_CHAN;"
  puts $fp "  `else"
  puts $fp "    parameter NUM_DMA_CHAN = 0;"
  puts $fp "  `endif"
  puts $fp "  `ifdef INCLUDE_USM_SUPPORT"
  puts $fp "    parameter NUM_USM_CHAN = NUM_HOSTMEM_CHAN;"
  puts $fp "  `else"
  puts $fp "    parameter NUM_USM_CHAN = 0;"
  puts $fp "`endif"
  puts $fp ""
  puts $fp "  //eventually we might not want to group the USM/DMA channels and their"
  puts $fp "  //sharing of VTP resources differently than alawys 1 DMA with 1 USM as"
  puts $fp "  //everything was initially designed to do. Leave it for now, but there"
  puts $fp "  //may be a reason to mix-and-match in the future?"
  puts $fp "  parameter NUM_ASP_DMA_AND_USM_CHAN = NUM_USM_CHAN + NUM_DMA_CHAN;"
  puts $fp "  parameter MAX_NUM_ASP_DMA_AND_USM_CHAN = 2 * NUM_HOSTMEM_CHAN;"
  puts $fp ""
  puts $fp "  //set the indices used by host_mem_if_vtp module"
  puts $fp "  //currently assuming we have the same number of DMA (and USM, if enabled) channels"
  puts $fp "  //as hostmem channels, which means the DMA/USM SVC indices will alternate with"
  puts $fp "  //DMA as even channels and USM as odd channels (when both are enabled)"
  puts $fp "  parameter HOSTMEM_VTP_SVC_CHAN_DMA = 0;"
  puts $fp "  parameter DMA_VTP_SVC_CHAN = 0;"
  puts $fp ""
  puts $fp "  parameter HOSTMEM_VTP_SVC_CHAN_USM = 1;"
  puts $fp "  parameter USM_VTP_SVC_CHAN = 0;"
  puts $fp ""
  puts $fp "  `ifdef INCLUDE_USM_SUPPORT"
  puts $fp "    parameter NUM_VTP_PORTS = 4*NUM_HOSTMEM_CHAN;"
  puts $fp "  `else"
  puts $fp "    parameter NUM_VTP_PORTS = 2*NUM_HOSTMEM_CHAN;"
  puts $fp "  `endif"
  puts $fp "  parameter NUM_VTP_PORTS_PER_CHAN = 2;"
  puts $fp ""
  puts $fp "  // Byte address of VTP CSRs"
  puts $fp "  parameter VTP_SVC_MMIO_BASE_ADDR = 'h2_4000;"
  puts $fp "  // DFH end-of-list flag - '0' means this is the end of the DFH list"
  puts $fp "  parameter MPF_VTP_DFH_NEXT_ADDR = 0;\n"
   
  puts $fp "  // USM kernel clock crossing bridge"
  puts $fp "  parameter USM_CCB_RESPONSE_FIFO_DEPTH       = 512;"
  puts $fp "  parameter USM_CCB_COMMAND_FIFO_DEPTH        = 256;"
  puts $fp "  parameter USM_CCB_COMMAND_ALMFULL_THRESHOLD = 16;\n"

  puts $fp "    function func_print_ofs_asp_pkg_parameters_during_synthesis ();"
  puts $fp "      \$display (\"ofs_asp_pkg.sv: NUM_HOSTMEM_CHAN is %d\", NUM_HOSTMEM_CHAN);"
  puts $fp "      \$display (\"ofs_asp_pkg.sv: NUM_DMA_CHAN is %d\", NUM_DMA_CHAN);"
  puts $fp "      \$display (\"ofs_asp_pkg.sv: NUM_USM_CHAN is %d\", NUM_USM_CHAN);"
  puts $fp "      \$display (\"ofs_asp_pkg.sv: NUM_ASP_DMA_AND_USM_CHAN is %d\", NUM_ASP_DMA_AND_USM_CHAN);"
  puts $fp "      \$display (\"ofs_asp_pkg.sv: MAX_NUM_ASP_DMA_AND_USM_CHAN is %d\", MAX_NUM_ASP_DMA_AND_USM_CHAN);"
  puts $fp "      \$display (\"ofs_asp_pkg.sv: HOSTMEM_VTP_SVC_CHAN_DMA is %d\", HOSTMEM_VTP_SVC_CHAN_DMA);"
  puts $fp "      \$display (\"ofs_asp_pkg.sv: HOSTMEM_VTP_SVC_CHAN_USM is %d\", HOSTMEM_VTP_SVC_CHAN_USM);"
  puts $fp "      \$display (\"ofs_asp_pkg.sv: NUM_VTP_PORTS is %d\", NUM_VTP_PORTS);"
  puts $fp "      \$display (\"ofs_asp_pkg.sv: NUM_VTP_PORTS_PER_CHAN is %d\", NUM_VTP_PORTS_PER_CHAN);"
  puts $fp "      \$display (\"ofs_asp_pkg.sv: HOSTMEM_CHAN_VTP_SVC is %d\", HOSTMEM_CHAN_VTP_SVC);"
  puts $fp "      \$display (\"ofs_asp_pkg.sv: HOSTMEM_CHAN_DEFAULT_WITH_MMIO is %d\", HOSTMEM_CHAN_DEFAULT_WITH_MMIO);"
  puts $fp "    endfunction"

  puts $fp "endpackage : ofs_asp_pkg"
  close $fp
  return
}

# Procedure to generate ASP directory structure
proc create_directory_structure {} {
  set platform_name      [get_parameter_value PLATFORM_NAME]
  set board_variant_name [get_parameter_value BOARD_VARIANT_NAME]

  if {![file exist common/]} {
    file mkdir common/
  }
  if {![file exist $platform_name/]} {
    file mkdir $platform_name/
  }
  if {![file exist $platform_name/hardware/]} {
    file mkdir $platform_name/hardware/
  }
  if {![file exist $platform_name/hardware/$board_variant_name/]} {
    file mkdir $platform_name/hardware/$board_variant_name/
  }
  if {![file exist $platform_name/hardware/$board_variant_name/build/]} {
    file mkdir $platform_name/hardware/$board_variant_name/build/
  }
  if {![file exist $platform_name/hardware/$board_variant_name/build/rtl/]} {
    file mkdir $platform_name/hardware/$board_variant_name/build/rtl/
  }
  if {![file exist $platform_name/hardware/$board_variant_name/build/scripts/]} {
    file mkdir $platform_name/hardware/$board_variant_name/build/scripts/
  }
  return
}

# Procedure to copy over common ASP files from the common/ directory
proc copy_common_files {} {
  set platform_name      [get_parameter_value PLATFORM_NAME]
  set board_variant_name [get_parameter_value BOARD_VARIANT_NAME]

  if {![file exist $platform_name/ase/]} {
    file copy -force ../common/ase/ $platform_name/ase/
  }
  if {![file exist $platform_name/bringup/]} {
    file copy -force ../common/bringup/ $platform_name/bringup/
  }
  if {![file exist $platform_name/linux64/]} {
    file copy -force ../common/linux64/ $platform_name/linux64/
  }
  if {![file exist $platform_name/scripts/]} {
    file copy -force ../common/scripts/ $platform_name/scripts/
  }
  if {![file exist $platform_name/hardware/common]} {
    file copy -force ../common/hardware/common/ $platform_name/hardware/common/
  }
  if {![file exist $platform_name/scripts/build-asp.sh]} {
    file copy -force scripts/build-asp.sh $platform_name/scripts/build-asp.sh
  }
  if {![file exist $platform_name/scripts/build-mmd.sh]} {
    file copy -force scripts/build-mmd.sh $platform_name/scripts/build-mmd.sh
  }
  if {![file exist common/source/]} {
    file copy -force ../common/source/ common/source/
  }
  return
}

# Procedure to copy over platform specific files (Agilex 7 vs Stratix 10)
proc copy_platform_specific_files {} {
  set platform_name      [get_parameter_value PLATFORM_NAME]
  set board_variant_name [get_parameter_value BOARD_VARIANT_NAME]
  set device_family      [get_parameter_value DEVICE_FAMILY]
  if { [string equal $device_family "Agilex 7"] } {
    if {![file exist $platform_name/hardware/common/build/ofs_asp.sdc]} {      
      file copy ../n6001/hardware/common/build/ofs_asp.sdc $platform_name/hardware/common/build/ofs_asp.sdc
    }
    if {![file exist $platform_name/hardware/common/build/quartus.ini]} {
      file copy ../n6001/hardware/common/build/quartus.ini $platform_name/hardware/common/build/quartus.ini
    }
    if {![file exist $platform_name/hardware/common/build/scripts/run.sh]} {
      file copy ../n6001/hardware/common/build/scripts/run.sh $platform_name/hardware/common/build/scripts/run.sh
    }
    if {![file exist $platform_name/hardware/common/build/scripts/ase-sim-compile.sh]} {
      file copy ../n6001/hardware/common/build/scripts/ase-sim-compile.sh $platform_name/hardware/common/build/scripts/ase-sim-compile.sh
    }
  } elseif { [string equal $device_family "Stratix 10"] } {
    if {![file exist $platform_name/hardware/common/1SX280HN2F43E2VG_dm.xml]} {
      file copy ../d5005/hardware/common/1SX280HN2F43E2VG_dm.xml $platform_name/hardware/common/1SX280HN2F43E2VG_dm.xml
    }
    if {![file exist $platform_name/hardware/common/build/ofs_asp.sdc]} {
      file copy ../d5005/hardware/common/build/ofs_asp.sdc $platform_name/hardware/common/build/ofs_asp.sdc
    }
    if {![file exist $platform_name/hardware/common/build/scripts/run.sh]} {
      file copy ../d5005/hardware/common/build/scripts/run.sh $platform_name/hardware/common/build/scripts/run.sh
    }
    if {![file exist $platform_name/hardware/common/build/scripts/ase-sim-compile.sh]} {
      file copy ../d5005/hardware/common/build/scripts/ase-sim-compile.sh $platform_name/hardware/common/build/scripts/ase-sim-compile.sh
    }
  }
  return
}

# Procedure to generate board_env.xml file
# This only needs to be done once for the first board variant and can be skipped in
# following board variant generations
proc generate_board_env_xml {} {
  set oneapi_version     [get_parameter_value ONEAPI_VERSION]
  set platform_name      [get_parameter_value PLATFORM_NAME]
  set board_variant_name [get_parameter_value BOARD_VARIANT_NAME]

  set fp [ open "$platform_name/board_env.xml" w ]
    
  # write out header
  puts $fp "<!-- THIS FILE IS AUTO-GENERATED BY THE PLATFORM DESIGNER ONEAPI KERNEL WRAPPER IP -->"
  puts $fp "<!-- PLEASE DO NOT MODIFY THIS FILE -->"
  puts $fp "<!-- INSTEAD MAKE CHANGES IN YOUR PLATFORM DESIGNER PARAMETERIZATION OF THIS IP -->"
  puts $fp "<!-- AND RE-GENERATE -->\n"

  puts $fp "<?xml version=\"1.0\"?>"
  puts $fp "<board_env version=\"$oneapi_version\" name=\"$platform_name\">"
  puts $fp "  <hardware dir=\"hardware\" default=\"$board_variant_name\"></hardware>"
  puts $fp "  <platform name=\"linux64\">"
  puts $fp "    <mmdlib>libopae-c.so,%b/linux64/lib/libMPF.so,%b/linux64/lib/libintel_opae_mmd.so</mmdlib>"
  puts $fp "    <linkflags>-L%a/linux64/lib -L%b/linux64/lib </linkflags>"
  puts $fp "    <linklibs> -lintel_opae_mmd -lrt -lMPF</linklibs>"
  puts $fp "    <utilbindir>%b/linux64/libexec</utilbindir>"
  puts $fp "  </platform>"
  puts $fp "</board_env>"

  close $fp
  return
}

# Procedure to generate board_spec.xml file
proc generate_board_spec_xml {} {
  set enable_usm                       [get_parameter_value ENABLE_USM]
  set quartus_version                  [get_parameter_value QUARTUS_VERSION]
  set platform_name                    [get_parameter_value PLATFORM_NAME]
  set board_variant_name               [get_parameter_value BOARD_VARIANT_NAME]
  set quartus_project_name             [get_parameter_value QUARTUS_PROJECT_NAME]
  set quartus_revision_name            [get_parameter_value QUARTUS_REVISION_NAME]

  set device_model                     [get_parameter_value DEVICE_MODEL]
  set resources_alms                   [get_parameter_value RESOURCES_ALMS]
  set resources_ffs                    [get_parameter_value RESOURCES_FFS]
  set resources_dsps                   [get_parameter_value RESOURCES_DSPS]
  set resources_rams                   [get_parameter_value RESOURCES_RAMS]

  set asp_flows                        [get_parameter_value ASP_FLOWS]
  set kernel_cra_data_width            [get_parameter_value KERNEL_CRA_DATA_WIDTH]
  set kernel_cra_waitrequest_allowance [get_parameter_value KERNEL_CRA_WAITREQUEST_ALLOWANCE]

  set num_global_mem_systems           [get_parameter_value NUM_GLOBAL_MEM_SYSTEMS]

  set host_mem_name                    [get_parameter_value HOST_MEM_NAME]
  set host_mem_max_bandwidth           [get_parameter_value HOST_MEM_MAX_BANDWIDTH]
  set host_mem_num_mem_banks           [get_parameter_value HOST_MEM_NUM_MEM_BANKS]
  set host_mem_data_width              [get_parameter_value HOST_MEM_DATA_WIDTH]
  set host_mem_address_width           [get_parameter_value HOST_MEM_ADDRESS_WIDTH]
  set host_mem_max_burst               [get_parameter_value HOST_MEM_MAX_BURST]
  set host_mem_interleaved_bytes       [get_parameter_value HOST_MEM_INTERLEAVED_BYTES]
  set host_mem_latency                 [get_parameter_value HOST_MEM_LATENCY]
  set host_mem_waitrequest_allowance   [get_parameter_value HOST_MEM_WAITREQUEST_ALLOWANCE]

  set num_io_channels                  [get_parameter_value NUM_IO_CHANNELS]

  # initial computations
  if { $enable_usm == true } {
    set host_mem_size [format 0x%x [expr int(pow(2, $host_mem_address_width))]]
    set host_mem_start [format 0x%x 0]
    set mem_bank_start $host_mem_size
  } else {
    set mem_bank_start [format 0x%x 0]
  }

  set fp [ open "$platform_name/hardware/$board_variant_name/board_spec.xml" w ]

  # write out header
  #puts $fp "<!-- THIS FILE IS AUTO-GENERATED BY THE PLATFORM DESIGNER ONEAPI KERNEL WRAPPER IP -->"
  #puts $fp "<!-- PLEASE DO NOT MODIFY THIS FILE -->"
  #puts $fp "<!-- INSTEAD MAKE CHANGES IN YOUR PLATFORM DESIGNER PARAMETERIZATION OF THIS IP -->"
  #puts $fp "<!-- AND RE-GENERATE -->\n"

  # header
  puts $fp "<?xml version=\"1.0\"?>"
  puts $fp "<board version=\"$quartus_version\" name=\"$board_variant_name\">\n"

  # ASP flows
  foreach flow $asp_flows {
    puts $fp "  <compile name=\"$flow\" project=\"$quartus_project_name\" revision=\"$quartus_revision_name\" qsys_file=\"none\" generic_kernel=\"1\">"
    puts $fp "    <generate cmd=\"echo\"/>"
    puts $fp "    <synthesize cmd=\"quartus_sh -t build/scripts/entry.tcl $flow\"/>"
    puts $fp "    <auto_migrate platform_type=\"none\">"
    puts $fp "      <include fixes=\"\"/>"
    puts $fp "      <exclude fixes=\"\"/>"
    puts $fp "    </auto_migrate>"
    puts $fp "  </compile>\n"
  }

  # resource usage
  puts $fp "  <device device_model=\"$device_model\">"
  puts $fp "    <used_resources>"
  puts $fp "      <alms num=\"$resources_alms\"/>"
  puts $fp "      <ffs num=\"$resources_ffs\"/>"
  puts $fp "      <dsps num=\"$resources_dsps\"/>"
  puts $fp "      <rams num=\"$resources_rams\"/>"
  puts $fp "    </used_resources>"
  puts $fp "  </device>\n"
    
  # USM 
  if { $enable_usm == true } {
    puts $fp "  <global_mem name=\"$host_mem_name\" max_bandwidth=\"$host_mem_max_bandwidth\" interleaved_bytes=\"$host_mem_interleaved_bytes\" config_addr=\"0x018\" allocation_type=\"host, shared\">"
    puts $fp "    <interface name=\"board\" port=\"kernel_${host_mem_name}\" type=\"agent\" width=\"$host_mem_data_width\" maxburst=\"$host_mem_max_burst\" address=\"$host_mem_start\" size=\"$host_mem_size\" latency=\"$host_mem_latency\" waitrequest_allowance=\"$host_mem_waitrequest_allowance\"/>"
    puts $fp "  </global_mem>\n"
  }

  # Global memory
  for {set j 0} {$j < $num_global_mem_systems} {incr j 1} {
    set global_mem_name [get_parameter_value MEM_${j}_NAME]
    set global_mem_max_bandwidth [get_parameter_value MEM_${j}_MAX_BANDWIDTH]
    set global_mem_num_mem_banks [get_parameter_value MEM_${j}_NUM_BANKS]
    set global_mem_data_width [get_parameter_value MEM_${j}_DATA_WIDTH]
    set global_mem_bank_address_width [get_parameter_value MEM_${j}_BANK_ADDR_WIDTH]
    set global_mem_max_burst [get_parameter_value MEM_${j}_MAX_BURST]
    set global_mem_interleaved_bytes [get_parameter_value MEM_${j}_INTERLEAVED_BYTES]
    set global_mem_latency [get_parameter_value MEM_${j}_LATENCY]
    set global_mem_waitrequest_allowance [get_parameter_value MEM_${j}_WAITREQUEST_ALLOWANCE]
    set global_mem_bsp_avmm_write_ack [get_parameter_value MEM_${j}_BSP_AVMM_WRITE_ACK]
    set global_mem_config_addr [get_parameter_value MEM_${j}_CONFIG_ADDR]

    set mem_bank_size [format 0x%x [expr int(pow(2, $global_mem_bank_address_width))]]

    puts $fp "  <global_mem name=\"$global_mem_name\" max_bandwidth=\"$global_mem_max_bandwidth\" interleaved_bytes=\"$global_mem_interleaved_bytes\" config_addr=\"$global_mem_config_addr\" allocation_type=\"device\" default=\"1\">"
    if { $global_mem_bsp_avmm_write_ack } {
      set global_mem_bsp_avmm_write_ack_integer 1
    } else {
      set global_mem_bsp_avmm_write_ack_integer 0
    }	
    for {set i 0} {$i < $global_mem_num_mem_banks} {incr i 1} {
      puts $fp "    <interface name=\"board\" port=\"kernel_${global_mem_name}_$i\" type=\"agent\" width=\"$global_mem_data_width\" maxburst=\"$global_mem_max_burst\" address=\"$mem_bank_start\" size=\"$mem_bank_size\" latency=\"$global_mem_latency\" waitrequest_allowance=\"$global_mem_waitrequest_allowance\" bsp_avmm_write_ack=\"$global_mem_bsp_avmm_write_ack_integer\"/>"
      set mem_bank_start [format 0x%x [expr $mem_bank_start+$mem_bank_size]]
    }
    puts $fp "  </global_mem>\n"
  }

  # kernel configuration space                            
  puts $fp "  <host>"
  puts $fp "    <kernel_config start=\"0x00000000\" size=\"0x0100000\"/>"
  puts $fp "  </host>\n"
  puts $fp "  <interfaces>"
  puts $fp "    <interface name=\"board\" port=\"kernel_cra\" type=\"host\" width=\"$kernel_cra_data_width\" misc=\"0\" waitrequest_allowance=\"$kernel_cra_waitrequest_allowance\"/>"
  puts $fp "    <interface name=\"board\" port=\"kernel_irq\" type=\"irq\" width=\"1\"/>"
  puts $fp "    <kernel_clk_reset clk=\"board.kernel_clk\" clk2x=\"board.kernel_clk2x\" reset=\"board.kernel_reset\"/>"
  puts $fp "  </interfaces>\n"

  # I/O channels
  if { $num_io_channels != 0 } {
    puts $fp "  <channels>"
    for {set i 0} {$i < $num_io_channels} {incr i 1} {
      set data_width [get_parameter_value CH_${i}_DATA_WIDTH]
      puts $fp "    <interface name=\"board\" port=\"udp_out_$i\" type=\"streamsink\" width=\"$data_width\" chan_id=\"udp_out_$i\"/>"
      puts $fp "    <interface name=\"board\" port=\"udp_in_$i\" type=\"streamsource\" width=\"$data_width\" chan_id=\"udp_in_$i\"/>"
    }
    puts $fp "  </channels>\n"
  }

  puts $fp "</board>"
  close $fp
  return
}

# Procedure to generate oneapi_afu.json file
proc generate_oneapi_afu_json {} {
  set platform_name        [get_parameter_value PLATFORM_NAME]
  set clock_frequency_high [get_parameter_value CLOCK_FREQUENCY_HIGH]
  set clock_frequency_low  [get_parameter_value CLOCK_FREQUENCY_LOW]
  set board_variant_name   [get_parameter_value BOARD_VARIANT_NAME]
  set afu_id_h             [get_parameter_value AFU_ID_H]
  set afu_id_l             [get_parameter_value AFU_ID_L]

  set fp [ open "$platform_name/hardware/$board_variant_name/build/oneapi_afu.json" w ]

  # write out header
  #puts $fp "// THIS FILE IS AUTO-GENERATED BY THE PLATFORM DESIGNER ONEAPI KERNEL WRAPPER IP"
  #puts $fp "// PLEASE DO NOT MODIFY THIS FILE"
  #puts $fp "// INSTEAD MAKE CHANGES IN YOUR PLATFORM DESIGNER PARAMETERIZATION OF THIS IP"
  #puts $fp "// AND RE-GENERATE\n"

  puts $fp "{"
  puts $fp "   \"version\": 1,"
  puts $fp "   \"afu-image\": {"
  puts $fp "      \"power\": 0,"
  puts $fp "      \"clock-frequency-high\": \"$clock_frequency_high\","
  puts $fp "      \"clock-frequency-low\": \"$clock_frequency_low\","
  puts $fp "      \"afu-top-interface\":"
  puts $fp "         {"
  puts $fp "            \"class\": \"ofs_plat_afu\""
  puts $fp "         },"
  puts $fp "      \"accelerator-clusters\":"
  puts $fp "         \["
  puts $fp "            {"
  puts $fp "               \"name\": \"$board_variant_name\","
  puts $fp "               \"total-contexts\": 1,"
  puts $fp "               \"accelerator-type-uuid\": \"$afu_id_h$afu_id_l\""
  puts $fp "            }"
  puts $fp "         ]"
  puts $fp "   }"
  puts $fp "}"
  close $fp
  return
}

# Procedure to generate parameters.tcl file for _hw.tcl components
proc generate_parameters_tcl {} {
  set platform_name          [get_parameter_value PLATFORM_NAME]
  set board_variant_name     [get_parameter_value BOARD_VARIANT_NAME]
  set afu_id_h               [get_parameter_value AFU_ID_H]
  set afu_id_l               [get_parameter_value AFU_ID_L]
  set num_global_mem_systems [get_parameter_value NUM_GLOBAL_MEM_SYSTEMS]
  set num_io_channels        [get_parameter_value NUM_IO_CHANNELS]
  set snoop_port_enable      [get_parameter_value SNOOP_PORT_ENABLE]
  set num_dma_channels       [get_parameter_value NUM_DMA_CHANNELS]

  if { $num_io_channels == "0"} {
    set iopipe_support false
  } else {
    set iopipe_support true
  }

  set GLOBAL_MEM_MAX 4

  set fp [ open "$platform_name/hardware/$board_variant_name/build/parameters.tcl" w ]

  # write out header
  #puts $fp "// THIS FILE IS AUTO-GENERATED BY THE PLATFORM DESIGNER ONEAPI KERNEL WRAPPER IP"
  #puts $fp "// PLEASE DO NOT MODIFY THIS FILE"
  #puts $fp "// INSTEAD MAKE CHANGES IN YOUR PLATFORM DESIGNER PARAMETERIZATION OF THIS IP"
  #puts $fp "// AND RE-GENERATE\n"

  puts $fp "set p_AFU_ID_H {0x$afu_id_h}"
  puts $fp "set p_AFU_ID_L {0x$afu_id_l}"
  puts $fp "set p_IOPIPE_SUPPORT $iopipe_support"
  puts $fp "set p_SNOOP_PORT_ENABLE $snoop_port_enable"
  puts $fp "set p_NUMBER_OF_DMA_CHANNELS $num_dma_channels"
  puts $fp "set p_NUMBER_OF_GLOBAL_MEMORY_SYSTEMS $num_global_mem_systems"

  for {set i 0} {$i < $GLOBAL_MEM_MAX} {incr i} {
    set num_banks [get_parameter_value MEM_${i}_NUM_BANKS]
    set bank_addr_width [get_parameter_value MEM_${i}_BANK_ADDR_WIDTH]
    set data_width [get_parameter_value MEM_${i}_DATA_WIDTH]
    set max_burst [get_parameter_value MEM_${i}_MAX_BURST]
    set waitrequest_allowance [get_parameter_value MEM_${i}_WAITREQUEST_ALLOWANCE]
    set pipeline_stages [get_parameter_value MEM_${i}_MBD_TO_MEMORY_PIPE_STAGES]
    puts $fp "set p_MEM_${i}_NUMBER_OF_MEMORY_BANKS $num_banks"
    puts $fp "set p_MEM_${i}_MEMORY_BANK_ADDRESS_WIDTH $bank_addr_width"
    puts $fp "set p_MEM_${i}_DATA_WIDTH $data_width"
    puts $fp "set p_MEM_${i}_MAX_BURST_SIZE $max_burst"
    puts $fp "set p_MEM_${i}_KERNEL_GLOBALMEM_WAITREQUEST_ALLOWANCE $waitrequest_allowance"
    puts $fp "set p_MEM_${i}_MBD_TO_MEMORY_PIPE_STAGES $pipeline_stages"
  }

  close $fp
  return
}

########################
# Callbacks
########################

# Callback prcedure for synthesis (fileset callback)
proc synth { oneapi_asp_editor } {

  # Create directory structure
  ::create_directory_structure
  # Copy common files
  ::copy_common_files
  # Copy platform specific files
  ::copy_platform_specific_files

  # Generate Verilog Header file
  ::generate_vh
  # Generate Verilog Package file
  ::generate_package
  # Generate board_env.xml
  ::generate_board_env_xml
  # Generate board_spec.xml
  ::generate_board_spec_xml
  # Generate oneapi_afu.json
  ::generate_oneapi_afu_json
  # Generate parameters.tcl
  ::generate_parameters_tcl

  return
}

# Elaboration callback procedure 
proc elaboration {} {
  oneapi_asp_editor::main::main_elab $::parameter_properties $oneapi_asp_editor::main::main_dynamic_param
  oneapi_asp_editor::global_mem::mem_elab $::parameter_properties $oneapi_asp_editor::global_mem::mem_dynamic_param
  oneapi_asp_editor::usm::usm_elab $::parameter_properties $oneapi_asp_editor::usm::usm_dynamic_param
  oneapi_asp_editor::channels::chan_elab $::parameter_properties $oneapi_asp_editor::channels::chan_dynamic_param
  oneapi_asp_editor::project::project_elab $::parameter_properties $oneapi_asp_editor::project::project_dynamic_param
  return
}

########################
# Module Definition
########################

# Note: "DOC_LINK" is not a defined property, but is used here to pass the link to documentation for the module
set module_properties { NAME DISPLAY_NAME VERSION GROUP AUTHOR EDITABLE INTERNAL \
                        OPAQUE_ADDRESS_MAP SUPPORTED_DEVICE_FAMILIES INSTANTIATE_IN_SYSTEM_MODULE VALIDATION_CALLBACK \
                        ELABORATION_CALLBACK COMPOSITION_CALLBACK DESCRIPTION DOC_LINK }

# Setting Module Property Values
set module_val [list "oneapi_asp_editor" "oneAPI ASP Editor" 1.0 \
                     "Open FPGA Stack(OFS)" "" true false true {"Agilex 7" "Stratix 10"} true "" elaboration "" \
                     "oneAPI ASP Editor GUI for oneAPI FPGA Acceleration Flow." \
                     "https://ofs.github.io/latest/hw/common/reference_manual/oneapi_asp/oneapi_asp_ref_mnl/"]

# create preset from FIM settings
if {[info exists env(OPAE_PLATFORM_ROOT)]} {
  set pr_build_template_dir $env(OPAE_PLATFORM_ROOT)
  if { [file exists $pr_build_template_dir] == 1 } {
    set fp [ open "ip/presets/ofs_fim.qprs" w ]

    # write header
    puts $fp "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
    puts $fp "<ip>"
    puts $fp " <presets version=\"12.1\">"
    puts $fp "  <preset"
    puts $fp "     name=\"ofs_fim\""
    puts $fp "     kind=\"oneapi_asp_editor\""
    puts $fp "     version=\"All\""
    puts $fp "     description=\"\""
    puts $fp "     board=\"default\""
    puts $fp "     preset_category=\"\">"

    # look in the right FIM platform directory (D5005 doesn't have a platform name directory)
    if { [file exists "$pr_build_template_dir/hw/lib/build/syn/syn_top"] } {
      set platform_dir "$pr_build_template_dir/hw/lib/build/syn/"
    } else {
      set platform_dir [glob -nocomplain -type d -directory $pr_build_template_dir/hw/lib/build/syn/board/ *]
    }

    # ofs_fim_util_asp.qprs file
    set ofs_fim_util_asp "$platform_dir/syn_top/ofs_fim_util_asp.qprs"

    # check if ofs_fim_util_asp.qprs exists
    if { [file exists $ofs_fim_util_asp] == 1} {               
      # parse parameters
      set fpinput [open $ofs_fim_util_asp]
      while {[gets $fpinput line] > -1} {
        if {[regexp {name="(.*?)" value="(.*?)"} $line -> name value]} {
          if {$name == "OFS_FIM_FAMILY"}             {puts $fp "   <parameter name=\"DEVICE_FAMILY\" value=\"$value\" />"}
          if {$name == "OFS_FIM_QUARTUS_VER"}        {
	    regexp {Version (.*?)\.0 Build} $value -> quartus_version
	    puts $fp "   <parameter name=\"QUARTUS_VERSION\" value=\"$quartus_version\" />"
          }
          #if {$name == "OFS_FIM_REVISION"}           {puts $fp "   <parameter name=\"QUARTUS_REVISION_NAME\" value=\"$value\" />"}
          #if {$name == "OFS_FIM_DEVICE"}             {puts $fp "   <parameter name=\"DEVICE\" value=\"$value\" />"}
          if {$name == "OFS_FIM_PR_AVAIL_ALM"}       {puts $fp "   <parameter name=\"RESOURCES_ALMS\" value=\"$value\" />"}
          if {$name == "OFS_FIM_PR_AVAIL_DSP"}       {puts $fp "   <parameter name=\"RESOURCES_DSPS\" value=\"$value\" />"}
          if {$name == "OFS_FIM_PR_AVAIL_M20K"}      {puts $fp "   <parameter name=\"RESOURCES_RAMS\" value=\"$value\" />"}
          if {$name == "OFS_FIM_PR_AVAIL_REGISTERS"} {puts $fp "   <parameter name=\"RESOURCES_FFS\" value=\"$value\" />"}
        }
      }
      close $fpinput
    }

    # ofs_ip_cfg_local_mem_asp.qprs
    set ofs_ip_cfg_local_mem_asp "$platform_dir/syn_top/ofs_ip_cfg_local_mem_asp.qprs"

    # check if ofs_ip_cfg_local_mem_asp.qprs
    if { [file exists $ofs_ip_cfg_local_mem_asp] == 1} {               
      # parse parameters
      set fpinput [open $ofs_ip_cfg_local_mem_asp]
      while {[gets $fpinput line] > -1} {
        if {[regexp {name="(.*?)" value="(.*?)"} $line -> name value]} {
          if {$name == "OFS_FIM_IP_CFG_LOCAL_MEM_NUM_AXI_CHANNELS"}        {puts $fp "   <parameter name=\"MEM_0_NUM_BANKS\" value=\"$value\" />"}
          if {$name == "OFS_FIM_IP_CFG_LOCAL_MEM_AXI_RDATA_WIDTH"}         {puts $fp "   <parameter name=\"MEM_0_DATA_WIDTH\" value=\"$value\" />"}
          #if {$name == "OFS_FIM_IP_CFG_LOCAL_MEM_AXI_RDATA_BURST_COUNT"}   {puts $fp "   <parameter name=\"DEVICE_FAMILY\" value=\"$value\" />"}
          #if {$name == "OFS_FIM_IP_CFG_LOCAL_MEM_AXI_WDATA_WIDTH"}         {puts $fp "   <parameter name=\"DEVICE_FAMILY\" value=\"$value\" />"}
          #if {$name == "OFS_FIM_IP_CFG_LOCAL_MEM_AXI_WDATA_BURST_COUNT"}   {puts $fp "   <parameter name=\"DEVICE_FAMILY\" value=\"$value\" />"}
          if {$name == "OFS_FIM_IP_CFG_LOCAL_MEM_AXI_ADDR_WIDTH"}          {puts $fp "   <parameter name=\"MEM_0_BANK_ADDR_WIDTH\" value=\"$value\" />"}
          if {$name == "OFS_FIM_IP_CFG_LOCAL_MEM_THEORETICAL_MAX_BW_GBps"} {
	    set mem_0_max_bandwidth [expr int($value * 1000)]
	    puts $fp "   <parameter name=\"MEM_0_MAX_BANDWIDTH\" value=\"$mem_0_max_bandwidth\" />"
          }
        }
      }
      close $fpinput
    } 

    # ofs_ip_cfg_hssi_ss_asp.qprs
    set ofs_ip_cfg_hssi_ss_asp "$platform_dir/syn_top/ofs_ip_cfg_hssi_ss_asp.qprs"

    # check if ofs_ip_cfg_hssi_ss_asp.qprs
    if { [file exists $ofs_ip_cfg_hssi_ss_asp] == 1} {               
      # parse parameters
      set fpinput [open $ofs_ip_cfg_hssi_ss_asp]
      while {[gets $fpinput line] > -1} {
        if {[regexp {name="(.*?)" value="(.*?)"} $line -> name value]} {
          if {$name == "OFS_FIM_IP_CFG_HSSI_SS_NUM_ETH_PORTS"} {
            puts $fp "   <parameter name=\"NUM_IO_CHANNELS\" value=\"$value\" />"
            set num_io_channels $value
          }
          if {$name == "OFS_FIM_IP_CFG_HSSI_SS_ETH_PACKET_WIDTH"} {
            for {set i 0} {$i < $num_io_channels} {incr i} {
	      puts $fp "   <parameter name=\"CH_${i}_DATA_WIDTH\" value=\"$value\" />"
            }
          }
          #if {$name == "OFS_FIM_IP_CFG_HSSI_SS_NUM_LANES"} {puts $fp "   <parameter name=\"DEVICE_FAMILY\" value=\"$value\" />"}
        }
      }
      close $fpinput
    } 

    # write trailer
    puts $fp "  </preset>"
    puts $fp " </presets>"
    puts $fp "</ip>"
    close $fp
  }
}

# Procedure call to define module
init_module $module_properties $module_val

########################
# Setup Static Display
########################

# Display properties
set display_properties { GROUP ID TYPE ADD_ARGS DISPLAY_NAME DISPLAY_HINT ENABLED VISIBLE PATH TEXT DESCRIPTION }

# Values for display Items 
set display_items [list \
                        [list "" AFU_ID_H PARAMETER "" "" "" "" "" "" "" ""] \
                        [list "" AFU_ID_L PARAMETER "" "" "" "" "" "" "" ""] \
                        [list "" "Global Memory (On-board)" GROUP tab "" "" "" "" "" "" ""] \
                        [list "" "Unified Shared Memory (USM)" GROUP tab "" "" "" "" "" "" ""] \
                        [list "" "Direct Memory Access (DMA)" GROUP tab "" "" "" "" "" "" ""] \
                        [list "" "Channels" GROUP tab "" "" "" "" "" "" ""] \
                        [list "" "Project Settings" GROUP tab "" "" "" "" "" "" ""] \
                  ]

# Procedure call to add display items to IP GUI
static_display $display_properties $display_items

########################
# Parameter Addition
########################

# Parameter Properties
# Note: "NAME" is not a defined property but is used to add parameter to IP 
set parameter_properties { NAME DISPLAY_NAME GROUP TYPE DEFAULT_VALUE DERIVED HDL_PARAMETER ALLOWED_RANGES \
                           UNITS DISPLAY_UNITS ENABLED VISIBLE DISPLAY_HINT AFFECTS_VALIDATION \
                           AFFECTS_ELABORATION AFFECTS_GENERATION DESCRIPTION }

# Parameters are stored in all_params to be added to Verilog Header (can be removed if generate_vh procedure is removed)
set all_params {}

################################################
# Main parameters
################################################
namespace eval oneapi_asp_editor::main {
  namespace export main_elab
  namespace export main_dynamic_param

  # Values for parameter property
  set main_dynamic_param [list \
    [list AFU_ID_H "32-bit AFU ID MSB" "" STRING "5D9FEF7BC4914DCE" "" "" "" \
    "" "" "" "" hexadecimal "" \
    "" "" "Enter 32-bit AFU ID MSB (hex value)"] \
    [list AFU_ID_L "32-bit AFU ID LSB" "" STRING "95FCF979F6F061BE" "" "" "" \
    "" "" "" "" hexadecimal "" \
    "" "" "Enter 32-bit AFU ID LSB (hex value)"] \
  ]

  # Procedure call to set parameter properties
  ::add_param $::parameter_properties $main_dynamic_param
    
  # Elaboration procedure for global memory (on-board) tab
  proc main_elab { prop_list dynamic_param } {
    return
  }

}

################################################
# Global Memory (On-board) Tab
################################################
namespace eval oneapi_asp_editor::global_mem {
  namespace export mem_elab
  namespace export mem_dynamic_param
  set GLOBAL_MEM_MAX 4
  # Maximum number of memory banks in a single global memory bank This MEM_BANK_MAX is limited by the allowed ranges of global memory bank divider
  set MEM_BANK_MAX {1 2 4 8}

  # Expected format for parameters: { NAME DISPLAY_NAME GROUP TYPE DEFAULT_VALUE DERIVED HDL_PARAMETER ALLOWED_RANGES \
  #                                   UNITS DISPLAY_UNITS ENABLED VISIBLE DISPLAY_HINT AFFECTS_VALIDATION \
  #                                   AFFECTS_ELABORATION AFFECTS_GENERATION DESCRIPTION }

  # Adding static parameters 
  add_display_item "Snoop port enable" SNOOP_PORT_ENABLE PARAMETER
  set mem_static_param [list \
    [list NUM_GLOBAL_MEM_SYSTEMS "Number of Global Memory Systems" "Global Memory (On-board)" INTEGER 1 "" "" "1:$GLOBAL_MEM_MAX" \
      "" "" true true "" "" \
      true "" "The number of global memory systems the oneAPI kernel connects to. The global memory system usually consists of the on-board external memory connected to FPGA. If your board has multiple memory banks of same type & size, these can be grouped as a single global memory system." \
    ] \
    [list SNOOP_PORT_ENABLE "Snoop port enable" "Global Memory (On-board)" BOOLEAN false "" "" "" "" "" true true "" "" false "" "Enable the snoop port on the memory bank divider. Useful for performance on Stratix 10 but degrades fMAX on Agilex based platforms." \
    ] \
  ]

  ::add_param $::parameter_properties $mem_static_param

  # Adding dynamic paramters (controlled by static parameter settings)
  for {set i 0} {$i < $GLOBAL_MEM_MAX} {incr i} {
    add_display_item "Global Memory (On-board)" "Global Memory $i" group tab
    set_display_item_property "Global Memory $i" VISIBLE false
    if { $i == 0 } {
      set configuration_address [format 0x%03X 24 ]
    } else {
      set configuration_address [format 0x%03X [ expr 256 + (($i - 1) * 4) ] ]
    }
    lappend mem_dynamic_param \
      [list MEM_${i}_NAME "Name" "Global Memory $i" STRING "device$i" "" "" "" \
        "" "" false true "" "" \
        "" "" "Name of the global memory system. By default this will be device0, device1 and so forth." \
      ] \
      [list MEM_${i}_MAX_BANDWIDTH "Maximum theoretical bandwidth" "Global Memory $i" INTEGER 76800 "" "" "" \
        "" "MB/s" "" "" "" "" \
        "" "" "This value should represent the maximum available theoretical bandwidth of all memory banks of the global memory system combined expressed in Megabyte per second." \
      ] \
      [list MEM_${i}_NUM_BANKS "Number of memory banks" "Global Memory $i" INTEGER 4 "" "" $MEM_BANK_MAX \
        "" "" "" "" "" "" \
        "" "" "This value specifies the number of memory banks that form the global memory system. On typical cards there are 1, 2 or 4 banks of DDR memory." \ 
      ] \
      [list MEM_${i}_DATA_WIDTH "Data width" "Global Memory $i" INTEGER 512 "" "" "" \
        "" "Bits" "" "" "" "" \
        "" "" "The data width is usually the data bus width of the FIMs representation of the global memory system. It typically is 512 bits wide. Many paths within the ASP are by default 512 bits, so if the data bus width of the global memory system deviates from the 512 bits width converters will be introduced." \
      ] \
      [list MEM_${i}_BANK_ADDR_WIDTH "Address width per bank" "Global Memory $i" INTEGER 32 "" "" "" \
        "" "Bits" "" "" "" "" \
        "" "" "Address Width for a single memory bank in your global memory (i.e. if your global memory has four memory banks of 8GB each, the address width to be entered in this field will be 32 for the single 8GB bank)" \
      ] \
      [list MEM_${i}_MAX_BURST "Burst size" "Global Memory $i" INTEGER 16 "" "" "" \
        "" "Words" "" "" "" "" \
        "" "" "This value is the maximum supported burst size for the global memory system. It typically is 16 words and most of the internal ASP logic will use 16 word bursts." \
      ] \
      [list MEM_${i}_KERNEL_TO_CCB_PIPELINE_STAGES "Pipeline stages (kernel to clock crosser)" "Global Memory $i" INTEGER 2 "" "" "" \
        "" "" "" "" "" "" \
        true "" "The amount of additional pipeline stages between the kernel and the clock crosser towards the global memory subsystem. Additional pipeline stages can help with timing closure rate and improve fMAX." \
      ] \
      [list MEM_${i}_WAITREQUEST_ALLOWANCE "Waitrequest allowance" "Global Memory $i" INTEGER 6 true "" "" \
        "" "" false true "" "" \
        false "" "The waitrequest allowance value allows for extra buffering of data in the clock crosser during an ongoing transaction. This value is automatically calculated by the amount of pipeline stages between the kernel and the clock crosser." \
      ] \
      [list MEM_${i}_MBD_TO_MEMORY_PIPE_STAGES "Pipeline stages (MBD to global memory)" "Global Memory $i" INTEGER 0 "" "" "" \
        "" "" "" "" "" "" \
        true "" "This parameter introduces additional pipeline stages on the host to global memory path between the Memory Bank Divider IP and the clock crosser towards the global memory subsystem. Adding pipeline stages here can help with the timing closure rate and fMAX performance." \
      ] \
      [list MEM_${i}_BSP_AVMM_WRITE_ACK "AVMM write acknowledge" "Global Memory $i" BOOLEAN true "" "" "" \
        "" "" "" "" "" "" \
        "" "" "For some memory controller and configurations in the FIM AVMM write acknowledge generation is used in the ASP logic to signal back to the write requestor that the write was acknowledged downstream." \
      ] \
      [list MEM_${i}_CONFIG_ADDR "Configuration address" "Global Memory $i" STRING $configuration_address "" "" "" \
        "" ""  false true "" "" \
        "" "" "With multiple global memory systems each one has its own configuration address to connect to the kernel interface IP. The connection is made between the dedicated Memory Bank Divider within the global memory system and the kernel interface IP to allow for different memory bank configurations, e.g. bank interleaving. This value is automatically generated by the oneAPI ASP Editor." \
      ] \
      [list MEM_${i}_INTERLEAVED_BYTES "Interleaved bytes" "Global Memory $i" INTEGER 4096 true "" "" \
        "" "Bytes" false true "" "" \
        true "" "The number of bytes that are interleaved between separate memory banks. This value is automatically computed based on the number of memory banks and the maximum burst length." \
      ] \
      [list MEM_${i}_LATENCY "Latency (for oneAPI compiler)" "Global Memory $i" INTEGER 1500 "" "" "" \
        "" "" "" "" "" "" \
        "" "" "The latency of the global memory system in clock cycles" \
      ] \     
  }

  ::add_param $::parameter_properties $mem_dynamic_param

  # Elaboration procedure for global memory (on-board) tab
  proc mem_elab { prop_list dynamic_param } {
    variable GLOBAL_MEM_MAX

    # Set visibility of global memory tabs
    set num_global [get_parameter_value NUM_GLOBAL_MEM_SYSTEMS]
    for {set i 0} {$i < $GLOBAL_MEM_MAX} {incr i} {
      if { $i < $num_global } {
        set_display_item_property "Global Memory $i" VISIBLE true
      } else {
        set_display_item_property "Global Memory $i" VISIBLE false
      }
      set mem_pipeline_stages [get_parameter_value MEM_${i}_KERNEL_TO_CCB_PIPELINE_STAGES]
      set_parameter_value MEM_${i}_WAITREQUEST_ALLOWANCE [expr $mem_pipeline_stages + 4]
    }

    # Calculate global memory interleaved bytes requirement
    for {set i 0} {$i < $GLOBAL_MEM_MAX} {incr i} {
      set num_banks  [get_parameter_value MEM_${i}_NUM_BANKS]
      set data_width [get_parameter_value MEM_${i}_DATA_WIDTH]
      set max_burst  [get_parameter_value MEM_${i}_MAX_BURST]
      set data_width_words [expr $data_width / 8]
      if {$num_banks <= 2} {
        set_parameter_value MEM_${i}_INTERLEAVED_BYTES [expr $max_burst * $data_width_words]
      } else {
        set_parameter_value MEM_${i}_INTERLEAVED_BYTES [expr $max_burst * $data_width_words * 4]
      }
    }	
    return
  }

}

################################################
# Unified Shared Memory (USM) Tab
################################################
namespace eval oneapi_asp_editor::usm {
  namespace export usm_elab
  namespace export usm_dynamic_param
  set MEM_BANK_MAX {1}

  # Expected format for parameters: { NAME DISPLAY_NAME GROUP TYPE DEFAULT_VALUE DERIVED HDL_PARAMETER ALLOWED_RANGES \
  #                                   UNITS DISPLAY_UNITS ENABLED VISIBLE DISPLAY_HINT AFFECTS_VALIDATION \
  #                                   AFFECTS_ELABORATION AFFECTS_GENERATION DESCRIPTION }

  # Adding static parameters 
  set usm_static_param [list [list ENABLE_USM "Unified Shared Memory Interface" "Unified Shared Memory (USM)" BOOLEAN true "" "" "" \
                                   "" "" true true "" "" \
                                   true "" "Enable kernel to Unified Shared Memory (USM) interface." \
                             ] \
		       ]

  ::add_param $::parameter_properties $usm_static_param

  add_display_item "Unified Shared Memory (USM)" "USM Memory 0" group tab
  set_display_item_property "USM Memory 0" VISIBLE false
  set usm_dynamic_param [list \
    [list HOST_MEM_NAME "Name" "USM Memory 0" STRING "host" "" "" "" \
      "" "" false true "" "" \
      false "" "The name of the USM memory interface that the oneAPI kernel will connect to. This will be automatically generated and have the prefix 'host'." \
    ] \
    [list HOST_MEM_MAX_BANDWIDTH "Maximum theoretical bandwidth" "USM Memory 0" INTEGER 30000 "" "" "" \
      "" "MB/s" true true "" "" \
      false "" "The USM memory interface maximum theoretical bandwidth in Megabytes per second. This value will be used for estimating throughput." \ 
    ] \
    [list HOST_MEM_NUM_MEM_BANKS "Number of interfaces" "USM Memory 0" INTEGER 1 $MEM_BANK_MAX "" "" \
      "" "" false true "" "" \
      false "" "The number of interfaces for the USM memory system. Currently there is only 1 supported, but in future there can be enhancements to allow for multiple USM interfaces to increase throughput." \ 
    ] \
    [list HOST_MEM_DATA_WIDTH "Data width" "USM Memory 0" INTEGER 512 "" "" "" \
      "" "Bits" true true "" "" \
      false "" "The data width of the USM memory interface. Typically this is set to 512 bits." \ 
    ] \
    [list HOST_MEM_ADDRESS_WIDTH "Address width" "USM Memory 0" INTEGER 48 "" "" "" \
      "" "Bits" true true "" "" \
      false "" "The address width of the USM memory interface." \ 
    ] \
    [list HOST_MEM_MAX_BURST "Burst size" "USM Memory 0" INTEGER 16 "" "" "" \
      "" "Words" true true "" "" \
      false "" "The maximum burst size for the USM memory interface. Typically this is set to 16 words." \ 
    ] \
    [list HOST_MEM_PIPELINE_STAGES "Pipeline stages" "USM Memory 0" INTEGER 3 "" "" "" \
      "" "" "" "" "" "" \
      true "" "The additional amount of pipeline stages between the oneAPI kernel and the USM memory system clock crosser. Increasing this value can lead to better timing closure rate and increased fMAX performance but comes with additional logic resource cost." \
    ] \
    [list HOST_MEM_WAITREQUEST_ALLOWANCE "Waitrequest allowance" "USM Memory 0" INTEGER 7 true "" "" \
      "" "" false true "" "" \
      false "" "This value will be automatically calculated by taking the pipeline stages between the oneAPI kernel and the USM memory system clock crosser into account." \
    ] \
    [list HOST_MEM_INTERLEAVED_BYTES "Interleaved bytes" "USM Memory 0" INTEGER 1024 "" "" "" \
      "" "" false true "" "" \
      false "" "The number of bytes that will be used to interleave between multiple USM memory interfaces. Currently there is only support for one memory interface, so this value is fixed." \
    ] \
    [list HOST_MEM_LATENCY "Latency (for oneAPI compiler)" "USM Memory 0" INTEGER 800 "" "" "" \
      "" "" true true "" "" \
      false "" "The latency for the USM memory path in clock cycles." \ 
    ] 
  ]
  ::add_param $::parameter_properties $usm_dynamic_param

  # Elaboration procedure for USM tab
  proc usm_elab { prop_list dynamic_param } {
    set enable_usm [get_parameter_value ENABLE_USM]
    if { $enable_usm } { 
      set_display_item_property "USM Memory 0" VISIBLE true
    } else {
      set_display_item_property "USM Memory 0" VISIBLE false
    }
    set host_mem_pipeline_stages [get_parameter_value HOST_MEM_PIPELINE_STAGES]
    set_parameter_value HOST_MEM_WAITREQUEST_ALLOWANCE [expr $host_mem_pipeline_stages + 4]
   
    return
  }

}

################################################
# Direct Memory Access (DMA) Tab
################################################
namespace eval oneapi_asp_editor::dma {

  # Expected format for parameters: { NAME DISPLAY_NAME GROUP TYPE DEFAULT_VALUE DERIVED HDL_PARAMETER ALLOWED_RANGES \
  #                                   UNITS DISPLAY_UNITS ENABLED VISIBLE DISPLAY_HINT AFFECTS_VALIDATION \
  #                                   AFFECTS_ELABORATION AFFECTS_GENERATION DESCRIPTION }

  set DMA_CHAN_MAX 4

  # Adding static parameters
  set dma_static_param [list [list NUM_DMA_CHANNELS "Number of DMA Channels" "Direct Memory Access (DMA)" INTEGER 1 "" "" "0:$DMA_CHAN_MAX" \
                                   "" "" true true "" "" \
                                   true "" "Enter the number of DMA channels you want to be used in the DMA controller." \
			     ] \
		       ]

  ::add_param $::parameter_properties $dma_static_param

}

################################################
# IO Channel Tab
################################################
namespace eval oneapi_asp_editor::channels {
  namespace export chan_elab
  namespace export chan_dynamic_param
  set IO_CHAN_MAX 16

  # Expected format for parameters: { NAME DISPLAY_NAME GROUP TYPE DEFAULT_VALUE DERIVED HDL_PARAMETER ALLOWED_RANGES \
  #                                   UNITS DISPLAY_UNITS ENABLED VISIBLE DISPLAY_HINT AFFECTS_VALIDATION \
  #                                   AFFECTS_ELABORATION AFFECTS_GENERATION DESCRIPTION }

  set chan_static_param [list [list NUM_IO_CHANNELS "Number of I/O Channels" "Channels" INTEGER 8 "" "" "0:$IO_CHAN_MAX" \
                                    "" "" true true "" "" \
                                    true "" "Enter the number of Input/Output (IO) channels you want from kernel." \
			      ] \
		        ]

  ::add_param $::parameter_properties $chan_static_param

  for {set i 0} {$i < $IO_CHAN_MAX} {incr i} {
    add_display_item "Channels" "Channel $i" group
    set_display_item_property "Channel $i" VISIBLE false
    add_display_item "Channel $i" CH_${i}_DATA_WIDTH PARAMETER
    lappend chan_dynamic_param [list CH_${i}_DATA_WIDTH "Data Width for I/O Channel $i" "Channel $i" INTEGER 64 "" "" "" \
                                     "" "" "" "" "" "" \
                                     "" "" "Enter the data width for the streaming I/O channel from kernel" \
			       ]
  }

  ::add_param $::parameter_properties $chan_dynamic_param

  # Elaboration procedure for IO Channel tab
  proc chan_elab { prop_list dynamic_param } {
    variable IO_CHAN_MAX
    set num_chan [get_parameter_value NUM_IO_CHANNELS]
    for {set i 0} {$i < $IO_CHAN_MAX} {incr i} {
      if { $i < $num_chan } {
        set_display_item_property "Channel $i" VISIBLE true
      } else {
        set_display_item_property "Channel $i" VISIBLE false
      }
    }

    return
  }

}

################################################
# Project Settings Tab
################################################
namespace eval oneapi_asp_editor::project {
  namespace export project_elab
  namespace export project_dynamic_param

  # Expected format for parameters: { NAME DISPLAY_NAME GROUP TYPE DEFAULT_VALUE DERIVED HDL_PARAMETER ALLOWED_RANGES \
  #                                   UNITS DISPLAY_UNITS ENABLED VISIBLE DISPLAY_HINT AFFECTS_VALIDATION \
  #                                   AFFECTS_ELABORATION AFFECTS_GENERATION DESCRIPTION }

  set project_dynamic_param []

  add_display_item "Project Settings" "ASP settings" group
  set_display_item_property "ASP settings" VISIBLE true
  add_display_item "Device family" DEVICE_FAMILY PARAMETER
  add_display_item "Platform name" PLATFORM_NAME PARAMETER
  add_display_item "Board variant name" BOARD_VARIANT_NAME PARAMETER
  add_display_item "Quartus version" QUARTUS_VERSION PARAMETER
  add_display_item "OneAPI compiler version" ONEAPI_VERSION PARAMETER
  add_display_item "Supported ASP flows" ASP_FLOWS PARAMETER
  set DEVICE_FAMILY_RANGE {"Agilex 7" "Stratix 10"}
  lappend project_dynamic_param \
    [list DEVICE_FAMILY "Device family" "ASP settings" STRING "Agilex 7" "" "" $DEVICE_FAMILY_RANGE "" "" true true "" "" true "" "FPGA Device family"] \
    [list PLATFORM_NAME "Platform name" "ASP settings" STRING "n6001" "" "" "" "" "" true true "" "" false "" "The name of the platform to be targeted. This value will result in the generated ASP name to be used."] \
    [list BOARD_VARIANT_NAME "Board variant name" "ASP settings" STRING "ofs_n6001_usm_iopipes" "" "" "" "" "" true true "" "" false "" "The name of the board variant that will be created with the current settings."] \
    [list QUARTUS_VERSION "Quartus version" "ASP settings" STRING "23.4" "" "" "" "" "" true true "" "" false "" "The Quartus version that will be used when targeting this ASP."] \
    [list ONEAPI_VERSION "OneAPI compiler version" "ASP settings" STRING "2024.0" "" "" "" "" "" true true "" "" false "" "The oneAPI compiler version that will be used when targeting this ASP."] \
    [list ASP_FLOWS "Supported ASP flows" "ASP settings" STRING "afu_flat afu_flat_kclk" "" "" "" "" "" false false "" "" false "" "The supported ASP flows. This value is currently fixed and cannot be changed from its default afu_flat and afu_flat_kclk flow"] \

  add_display_item "Project Settings" "Quartus project settings" group
  set_display_item_property "Quartus project settings" VISIBLE true
  add_display_item "Project name" QUARTUS_PROJECT_NAME PARAMETER
  add_display_item "Revision name" QUARTUS_REVISION_NAME PARAMETER
  add_display_item "Device model file" DEVICE_MODEL PARAMETER
  lappend project_dynamic_param \
    [list QUARTUS_PROJECT_NAME "Quartus project name" "Quartus project settings" STRING "ofs_top" "" "" "" "" "" true true "" "" false "" "The name of the Quartus project. This should remain ofs_top as it is used by default by the FIM compile."] \
    [list QUARTUS_REVISION_NAME "Quartus revision name" "Quartus project settings" STRING "ofs_pr_afu" "" "" "" "" "" true true "" "" false "" "The name of the Quartus project revision. This should remain ofs_pr_afu as it is used by default by the FIM out of tree AFU compile."] \
    [list DEVICE_MODEL "Device model" "Quartus project settings" STRING "agfb014r24a3e3vr0_dm.xml" "" "" "" "" "" true true "" "" false "" "The device model string name. This are usually supplied and shipped with the oneAPI compiler."] 

  add_display_item "Project Settings" "FPGA resources for kernel region" group
  set_display_item_property "FPGA resources for kernel region" VISIBLE true
  add_display_item "ALMs" RESOURCES_ALMS PARAMETER
  add_display_item "FFs" RESOURCES_FFS PARAMETER
  add_display_item "DSPs" RESOURCES_DSPS PARAMETER
  add_display_item "M20Ks" RESOURCES_RAMS PARAMETER
  lappend project_dynamic_param \
    [list RESOURCES_ALMS "ALMs" "FPGA resources for kernel region" INTEGER 351138 "" "" "" "" "" true true "" "" true "" "The number of ALMs available for the oneAPI kernel."] \
    [list RESOURCES_FFS "FFs" "FPGA resources for kernel region" INTEGER 1269922 "" "" "" "" "" true true "" "" true "The number of registers available for the oneAPI kernel."] \
    [list RESOURCES_DSPS "DSPs" "FPGA resources for kernel region" INTEGER 2284 "" "" "" "" "" true true "" "" true "The number of DSPs available for the oneAPI kernel."] \
    [list RESOURCES_RAMS "M20Ks" "FPGA resources for kernel region" INTEGER 4198 "" "" "" "" "" true true "" "" true "The number of M20K blocks available for the oneAPI kernel."] 

  add_display_item "Project Settings" "Kernel CRA" group
  set_display_item_property "Kernel CRA" VISIBLE true
  add_display_item "Kernel CRA data width" KERNEL_CRA_DATA_WIDTH PARAMETER
  add_display_item "Kernel CRA pipeline stages" KERNEL_CRA_PIPELINE_STAGES PARAMETER
  add_display_item "Kernel CRA waitrequest allowance" KERNEL_CRA_WAITREQUEST_ALLOWANCE PARAMETER
  lappend project_dynamic_param \
    [list KERNEL_CRA_DATA_WIDTH "Kernel CRA data width" "Kernel CRA" INTEGER 64 "" "" "" "" "" false true "" "" false "" "The data width of the kernel CRA interface. This value should be left at 64 as currently the kernel interface IP only supports 64 bit."] \
    [list KERNEL_CRA_PIPELINE_STAGES "Kernel CRA pipeline stages" "Kernel CRA" INTEGER 2 "" "" "" "" "" true true "" "" true "" "The number of pipeline stages between the kernel interface IP and the oneAPI kernel configuration interface. Adding pipeline stages here can increase timing closure rate and improve fMAX performance."] \
    [list KERNEL_CRA_WAITREQUEST_ALLOWANCE "Kernel CRA waitrequest allowance" "Kernel CRA" INTEGER 5 true "" "" "" "" true true "" "" false "" "The waitrequest allowance value is automatically calculated based on the amount of pipeline stages between the kernel interface IP and the oneAPI kernel configuration interface."] 

  add_display_item "Project Settings" "Kernel clock settings" group
  set_display_item_property "Kernel clock settings" VISIBLE true
  add_display_item "Range for low clock" CLOCK_FREQUENCY_LOW PARAMETER
  add_display_item "Range for high clock" CLOCK_FREQUENCY_HIGH PARAMETER
  set CLOCK_FREQUENCY_LOW_RANGE {"auto-400" "auto-600"}
  set CLOCK_FREQUENCY_HIGH_RANGE {"auto-800" "auto-1200"}
  lappend project_dynamic_param \
    [list CLOCK_FREQUENCY_LOW "Range for low clock" "Kernel clock settings" STRING "auto-600" true "" $CLOCK_FREQUENCY_LOW_RANGE "" "" true true "" "" false "" "The clock range for the oneAPI kernel frequency. Typically this is up to 400MHz for Stratix 10 based ASPs and 600MHz for Agilex based ASPs."] \
    [list CLOCK_FREQUENCY_HIGH "Range for high clock" "Kernel clock settings" STRING "auto-1200" true "" $CLOCK_FREQUENCY_HIGH_RANGE "" "" true true "" "" false "" "The clock range for the oneAPI kernel frequency for double pumped memories. This is double the kernel clock frequency and is typically up to 800MHz for Stratix 10 based ASPs and 1200 MHz for Agilex based ASPs."]

  ::add_param $::parameter_properties $project_dynamic_param

  # Elaboration procedure for Project Settings tab
  proc project_elab { prop_list static_param } {
    # set kernel CRA waitrequest value derived from the pipeline stages
    set kernel_cra_pipeline_stages [get_parameter_value KERNEL_CRA_PIPELINE_STAGES]
    set_parameter_value KERNEL_CRA_WAITREQUEST_ALLOWANCE [expr (2 * $kernel_cra_pipeline_stages) + 1]

    # set clock settings derived from the device family
    set device_family [get_parameter_value DEVICE_FAMILY]
    if { [string equal $device_family "Agilex 7"] } {
      set_parameter_value CLOCK_FREQUENCY_LOW "auto-600"
      set_parameter_value CLOCK_FREQUENCY_HIGH "auto-1200"
    } elseif { [string equal $device_family "Stratix 10"] } {
      set_parameter_value CLOCK_FREQUENCY_LOW "auto-400"
      set_parameter_value CLOCK_FREQUENCY_HIGH "auto-800"
    }

    return
  }

}

########################
# FileSet Addition
########################
add_fileset asp_synth QUARTUS_SYNTH synth
